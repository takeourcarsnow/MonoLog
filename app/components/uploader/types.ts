import { EditorSettings } from "../imageEditor/types";

export interface PreviewSectionProps {
  dataUrl: string | null;
  dataUrls: string[];
  originalDataUrls: string[];
  editorSettings: EditorSettings[];
  alt: string | string[];
  editing: boolean;
  editingIndex: number;
  setEditingIndex: React.Dispatch<React.SetStateAction<number>>;
  editingAlt: string;
  setAlt: React.Dispatch<React.SetStateAction<string | string[]>>;
  setEditorSettings: React.Dispatch<React.SetStateAction<EditorSettings[]>>;
  setDataUrls: React.Dispatch<React.SetStateAction<string[]>>;
  setOriginalDataUrls: React.Dispatch<React.SetStateAction<string[]>>;
  setDataUrl: React.Dispatch<React.SetStateAction<string | null>>;
  setPreviewLoaded: React.Dispatch<React.SetStateAction<boolean>>;
  setCompressedSize: React.Dispatch<React.SetStateAction<number | null>>;
  setOriginalSize: React.Dispatch<React.SetStateAction<number | null>>;
  setProcessing: React.Dispatch<React.SetStateAction<boolean>>;
  setEditing: React.Dispatch<React.SetStateAction<boolean>>;
  processing: boolean;
  previewLoaded: boolean;
  index: number;
  setIndex: React.Dispatch<React.SetStateAction<number>>;
  trackRef: React.RefObject<HTMLDivElement>;
  touchStartX: React.MutableRefObject<number | null>;
  touchDeltaX: React.MutableRefObject<number>;
  cameraOpen: boolean;
  setCameraOpen: React.Dispatch<React.SetStateAction<boolean>>;
  videoRef: React.RefObject<HTMLVideoElement>;
  streamRef: React.MutableRefObject<MediaStream | null>;
  fileActionRef: React.MutableRefObject<'append' | 'replace'>;
  replaceIndexRef: React.MutableRefObject<number | null>;
  fileInputRef: React.RefObject<HTMLInputElement>;
  cameraInputRef: React.RefObject<HTMLInputElement>;
  toast: any;
  handleFile: (file: File) => Promise<void>;
}
