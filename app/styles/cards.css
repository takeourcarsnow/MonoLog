.feed {
  display: grid;
  gap: 20px;
  /* center feed/explore content to match the app's main max width */
  max-width: var(--maxw);
  margin: 0 auto;
  width: 100%;
  box-sizing: border-box;
  /* keep a small horizontal padding so full-bleed slides don't touch the edges */
  padding: calc(4px + var(--safe-top, 0px)) var(--page-side-padding) 12px var(--page-side-padding); /* much smaller top padding */
  flex: 1;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}

/* Add extra top space when viewing the Favorites page so posts don't butt up
   against the top header. Using .page.favorites keeps this change scoped */
.page.favorites .feed {
  padding-top: calc(24px + var(--safe-top, 0px));
}
.card {
  background: var(--bg); border: 1px solid var(--border); border-radius: var(--radius);
  /* remove any shadow under posts */
  box-shadow: none !important;
  /* Changed from overflow:hidden to visible to avoid 1px vertical cropping
     of contained media at certain desktop zoom levels due to fractional
     rounding between image height and card box. Media-specific clipping
     still handled inside .card-media which retains overflow hidden. */
  overflow: visible;
  transform: translateY(4px); opacity: 0; animation: in 460ms var(--transition-mid) forwards;
  transition: transform var(--transition-fast), box-shadow var(--transition-fast), border-color var(--transition-fast);

  width: 100%;
  max-width: 100%;
  min-width: 0;
  
  /* Performance optimizations */
  contain: layout style paint;
  content-visibility: auto;
}
@keyframes in {
  to { transform: translateY(0); opacity: 1; }
}
.view-fade { 
  animation: viewFade 280ms var(--transition-mid) both;
  min-height: 100%;
  display: flex;
  flex-direction: column;
}
@keyframes viewFade { from { opacity: 0; transform: translateY(6px); } to { opacity: 1; transform: translateY(0); } }

.comment-item.new { animation: commentIn 360ms cubic-bezier(.2,.8,.2,1); }
@keyframes commentIn { from { opacity: 0; transform: translateY(6px) scale(.99); } to { opacity: 1; transform: translateY(0) scale(1); } }

/* animate removed comments: fade out and slide up slightly */
.comment-item.removing {
  animation: commentOut 320ms cubic-bezier(.2,.8,.2,1) forwards;
}
@keyframes commentOut {
  from { opacity: 1; transform: translateY(0) scale(1); height: auto; }
  to { opacity: 0; transform: translateY(-6px) scale(.995); height: 0; margin: 0; padding: 0; }
}

.card-head {
  display: flex; 
  align-items: center; 
  gap: 14px; /* increased gap to give more space between avatar and text */
  padding: 10px 12px; 
  min-width: 0; /* Allow flex children to shrink */
}

/* The avatar and user text are wrapped in a link which itself is a flex container
   (set via inline styles). Add an explicit gap here so the avatar and text separate
   even when the link is the immediate flex child. Keeping display/align-items here
   is safe if inline styles are removed later. */
.card-head .user-link {
  display: flex;
  align-items: center;
  gap: 6px;
  text-decoration: none;
  color: inherit;
}

/* Subtle, card-scoped button micro-interactions (used on About and other card actions) */
.card .btn {
  transition: transform 160ms var(--transition-mid), box-shadow 200ms var(--transition-mid), background 140ms ease;
  padding: 10px 14px; /* slightly larger touch target inside cards */
}
.card .btn:hover {
  transform: translateY(-2px);
  /* avoid creating any shadow under the post */
  box-shadow: none !important;
}
.card .btn.primary:hover {
  box-shadow: none !important;
}
.card .btn:focus {
  outline: none;
  /* remove focus shadow to avoid visible shadow under posts */
  box-shadow: none !important;
  transform: translateY(-1px);
}
.card .btn:active {
  transform: translateY(1px) scale(.997);
  box-shadow: none !important;
}

/* Icon reveal buttons: show a small icon and gently reveal the text on hover/focus
  or when JS toggles the `.expanded` class (used to reveal labels on click). */
.icon-reveal { display: inline-flex; align-items: center; gap: 8px; overflow: hidden; }
.icon-reveal .icon { display: inline-grid; place-items: center; width: 18px; height: 18px; transition: transform 220ms var(--transition-mid), opacity 220ms var(--transition-fast); }
.icon-reveal .reveal { display: inline-block; transform-origin: left center; transition: transform 260ms var(--transition-mid), opacity 220ms var(--transition-fast), max-width 260ms var(--transition-mid); opacity: 1; white-space: nowrap; max-width: 120px; overflow: hidden; }

/* default: slightly hide the reveal label on compact buttons to emphasize the icon */
.icon-reveal:not(.primary) .reveal { transform: translateX(-6px) scale(0.98); opacity: 0; max-width: 0; }

.icon-reveal:hover .icon,
.icon-reveal:focus .icon { transform: translateY(-3px) scale(1.06); }
.icon-reveal:hover .reveal,
.icon-reveal:focus .reveal { transform: translateX(0) scale(1); opacity: 1; max-width: 120px; }

/* Explicit expanded state: reveal label when JS toggles .expanded */
.icon-reveal.expanded .reveal { transform: translateX(0) scale(1); opacity: 1; max-width: 220px; }

/* make primary buttons slightly more pronounced */
.btn.primary.icon-reveal .reveal { font-weight: 700; }

/* In the post editor, always show the button labels and disable hover reveal */
.post-editor .icon-reveal .reveal { transform: translateX(0) scale(1); opacity: 1; max-width: 120px; }
.post-editor .icon-reveal:hover .reveal,
.post-editor .icon-reveal:focus .reveal { max-width: 120px; }

/* keep motion minimal for users who prefer reduced motion */
@media (prefers-reduced-motion: reduce) {
  .icon-reveal .icon, .icon-reveal .reveal, .icon-reveal:hover .icon, .icon-reveal:focus .icon, .icon-reveal:hover .reveal, .icon-reveal:focus .reveal { transition: none !important; transform: none !important; }
}

/* Respect prefers-reduced-motion */
@media (prefers-reduced-motion: reduce) {
  .card .btn, .card .btn:hover, .card .btn:focus { transition: none; transform: none; box-shadow: none; }
}
.avatar { width: 30px; height: 30px; border-radius: 50%; object-fit: cover; flex-shrink: 0; }
/* larger avatar size used in profile lists (e.g. Following page) */
.avatar.large {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  object-fit: cover;
  display: block;
  flex-shrink: 0;
}
.user-line { 
  display: flex; 
  flex-direction: column;
  gap: 2px;
  min-width: 0; /* Allow flex item to shrink below content size */
  flex: 1; /* Take available space */
  /* allow lines to wrap so long usernames and times don't get clipped */
  overflow: visible;
}
.username { 
  font-weight: 700; 
  font-size: 14px;
  /* allow wrapping for long usernames (e.g. @verylongname123) */
  white-space: normal;
  overflow: visible;
  text-overflow: clip;
  max-width: 100%;
  word-break: break-word;
  overflow-wrap: anywhere;
}
.dim { 
  color: var(--muted); 
  font-size: 12px;
  white-space: nowrap; /* keep the time on a single line */
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.card-media img {
  width: 100%; height: auto; display: block;
  background: var(--bg); opacity: 0; transition: opacity 220ms ease;
}
.card-media img.loaded { opacity: 1; }

.card-media {
  position: relative;
  border-radius: var(--radius);
  --photo-mat: 8px;
  --photo-matte: var(--bg);
  --inner-radius: calc(var(--radius) - var(--photo-mat));
  padding: var(--photo-mat);
  width: auto; max-width: 100%; display: block; margin: 0 auto;
  /* draw the matte directly on the container for a simpler implementation */
  background: var(--photo-matte);
  /* remove outer drop shadow so the frame blends with the card background */
  box-shadow: none;
}

/* List (single-column) view: constrain media height and allow vertical
   scrolling for tall photos so the post/card fits the viewport/container.
   This overrides the default overflow:hidden on .card-media for list view. */
@media (min-width: 769px) {
  .feed:not(.grid-view) .card-media {
    /* Limit media height to a portion of the viewport so very tall images
       don't push the card beyond the visible area. */
    max-height: 70vh;
    overflow-y: auto; /* enable vertical scrolling for tall images */
    overflow-x: hidden; /* avoid horizontal scrollbars */
    -webkit-overflow-scrolling: touch; /* smooth scrolling on iOS */
  }
}





/* Subtle frame for photos in feed / explore
   - uses an inset 1px ring to emulate a photo frame without changing layout
   - applies to single images, carousel slides, and grid tiles
*/
.card-media img,
.carousel-slide img,
.grid .tile img {
  /* image has inner rounding to match the matte â€” sits above the matte layer */
  border-radius: var(--radius-sm);
  background-clip: padding-box;
  box-shadow: none;
  transition: transform var(--transition-fast);
  display: block; width: 100%; height: auto;
  /* improve rendering during transforms/zoom */
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
}

/* Ensure the clickable link and ImageZoom container clip their contents
   to the inner rounded matte so transforms are clipped consistently. */
.card-media .media-link,
.card-media .media-link > div {
  position: relative;
  z-index: 2;
  display: block;
  /* clip to the inner matte radius so the image keeps rounded corners while zooming */
  border-radius: calc(var(--radius) - var(--photo-mat));
  overflow: hidden;
  /* create a stacking context so transforms on the image are properly clipped */
  transform: translateZ(0);
  will-change: transform;
}

/* Ensure ImageZoom wrapper clips transformed images using the parent's radius.
   The inner img must not carry its own border-radius because transforms can
   cause visual mismatch when scaling. The container (usually .media-link or
   .card-media) should provide the clipping via border-radius + overflow:hidden. */
.monolog-image-zoom {
  border-radius: inherit; /* inherit radius from parent (.tile or .card-media) */
  overflow: hidden;
}
.monolog-image-zoom img {
  border-radius: 0 !important;
  background-clip: border-box; /* ensure no rounding artifacts */
}

/* Defensive: ensure all images inside post cards (including carousel slides
   and grid tiles) are clipped to rounded corners even if an inner element
   or inline style tries to override rounding. This keeps post images
   consistently rounded across renderers (next/image, native img, zoom). */
.card-media, .card-media .media-link, .card-media .media-link > div, .grid .tile {
  border-radius: var(--radius) !important;
  overflow: hidden !important;
}

.card .card-media img,
.card .card-media .media-link img,
.card .card-media .carousel img,
.carousel-slide img,
.grid .tile img,
.card-media img {
  border-radius: var(--radius-sm) !important;
  background-clip: padding-box;
}

/* Slightly emphasize the frame on hover/focus for affordance without being loud */
.card:hover .card-media,
.card-media:hover,
.grid .tile:hover,
.carousel-slide:hover {
  /* intentionally no hover effect on media â€” keep appearance stable */
  box-shadow: none !important;
}

.card:hover {
  transform: translateY(0);
  /* explicitly disable hover shadow for posts */
  box-shadow: none !important;
  border-color: color-mix(in srgb, var(--primary), transparent 84%);
}

.card:focus-within { outline: none; }

/* Prefer showing the card outline only when a descendant is keyboard-focused.
   Uses :has() to detect a focus-visible descendant; browsers that don't support
   :has() will still hide the mouse-click halo (fallback above) while keyboard
   users retain a visible ring where supported. */
.card:has(:focus-visible) {
  outline: 2px solid color-mix(in srgb, var(--primary), transparent 70%);
  outline-offset: 4px;
  border-radius: 8px;
}

.card-body { padding: 10px 12px; display: grid; gap: 10px; }
.caption {
  font-size: 15px;
  font-family: 'Patrick Hand', ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
  line-height: 1.35;
  text-align: center;
  /* allow long captions/newlines to wrap */
  white-space: pre-wrap;
  overflow-wrap: anywhere;
  word-break: break-word;
}

.mention-link {
  color: var(--primary);
  text-decoration: none;
  font-weight: 600;
  transition: color 0.2s ease;
}

.mention-link:hover {
  color: var(--primary-hover, color-mix(in srgb, var(--primary), black 10%));
  text-decoration: underline;
}

/* Edit panel enter/exit: animate height and opacity so card borders expand smoothly */
.post-editor-wrap {
  overflow: hidden; /* contain the editor for max-height animation */
  max-height: 0; /* collapsed by default */
  opacity: 0;
  transition: max-height 260ms var(--transition-mid), opacity 220ms var(--transition-mid);
  will-change: max-height, opacity;
}
.post-editor-wrap.enter {
  /* a large enough max-height to fit editor content without snapping;
     it's tuned to typical editor height; using a sufficiently large value
     prevents clipping while keeping the transition smooth. */
  max-height: 420px;
  opacity: 1;
}
.post-editor-wrap.exit {
  max-height: 0;
  opacity: 0;
}

@media (prefers-reduced-motion: reduce) {
  .post-editor-wrap { transition: none !important; max-height: none !important; opacity: 1 !important; }
}
/* Caption/actions wrap: animate collapse/fade to avoid sudden content jump when editor opens */
.caption-wrap {
  overflow: hidden;
  max-height: 1000px; /* large default so visible state expands to content */
  opacity: 1;
  transition: max-height 260ms var(--transition-mid), opacity 220ms var(--transition-mid);
}
.card.editor-opening .caption-wrap {
  max-height: 0;
  opacity: 0;
}

.actions { display: flex; align-items: center; justify-content: center; gap: 10px; }
.action {
  display: inline-flex; align-items: center; gap: 6px; color: var(--muted);
  font-size: 13px; cursor: pointer; padding: 6px 8px; border-radius: 8px;
  transition: background var(--transition-fast), color var(--transition-fast);
}
.action:hover { background: color-mix(in srgb, var(--primary-weak), transparent 70%); color: var(--text); }

/* Tap / press feedback for action icons */
/* Ensure svgs inherit color and animate smoothly */
.action svg { width: 18px; height: 18px; display: inline-block; vertical-align: middle; transition: transform 160ms var(--transition-fast), opacity 160ms var(--transition-fast), color 200ms var(--transition-fast), stroke 200ms var(--transition-fast); color: inherit; }

/* Subtle press scale and color change for most actions (but not overriding favorite active state) */
.action:active { transform: translateY(1px) scale(0.992); }
.action:not(.favorite):active { color: var(--primary); }
.action:focus-visible { outline: 2px solid color-mix(in srgb, var(--primary), transparent 70%); outline-offset: 4px; border-radius: 8px; }

/* Also provide a tiny hover/press lift on pointer devices */
/* Grid view: layout grid and square tiles */
.feed.grid-view { padding: 4px 0; }
.feed.grid-view .grid { display: grid; gap: 2px; grid-template-columns: repeat(3, 1fr); grid-auto-rows: 1fr; align-items: start; }
.feed.grid-view .grid .tile {
  position: relative;
  width: 100%;
  aspect-ratio: 1 / 1 !important; /* force tiles square (override other rules) */
  overflow: hidden; /* crop any overflowing image */
  display: block;
  border-radius: 10px; /* match image/frame radius */
  align-self: stretch;
  padding: 2px; /* Add space between photo and tile border (reduced for very dense grid) */
}

/* subtle entrance for grid tiles (match list .card animation feel) */
@keyframes gridIn {
  from { opacity: 0; transform: translateY(8px); }
  to { opacity: 1; transform: translateY(0); }
}

  .feed.grid-view .grid .tile {
  opacity: 0;
  transform: translateY(8px);
  animation: gridIn 420ms var(--transition-mid) forwards;
}

/* small stagger so tiles cascade visually across rows (3-column default) */
  .feed.grid-view .grid .tile:nth-child(3n+1) { animation-delay: 8ms; }
  .feed.grid-view .grid .tile:nth-child(3n+2) { animation-delay: 16ms; }
  .feed.grid-view .grid .tile:nth-child(3n) { animation-delay: 24ms; }

@media (min-width: 768px) {
  /* On wider screens use 4 columns so tiles are smaller */
  .feed.grid-view .grid { grid-template-columns: repeat(4, 1fr); }
  .feed.grid-view .grid .tile { animation-duration: 420ms; }
  .feed.grid-view .grid .tile:nth-child(4n+1) { animation-delay: 40ms; }
  .feed.grid-view .grid .tile:nth-child(4n+2) { animation-delay: 80ms; }
  .feed.grid-view .grid .tile:nth-child(4n+3) { animation-delay: 120ms; }
  .feed.grid-view .grid .tile:nth-child(4n)   { animation-delay: 160ms; }
}

@media (prefers-reduced-motion: reduce) {
  .feed.grid-view .grid .tile { animation: none !important; transform: none !important; opacity: 1 !important; }
}

/* Ensure images inside grid tiles fill and are center-cropped */
.feed.grid-view .grid .tile img,
.feed.grid-view .grid .tile .card-media img,
.feed.grid-view .grid .tile .carousel-slide img {
  width: 100% !important;
  height: 100% !important;
  object-fit: cover !important;
  object-position: center center !important;
  display: block;
}

/* Ensure the direct child of a tile (link/wrapper component) fills the square
   so wrappers like ImageZoom can size their inner <img> to 100% height. */
.feed.grid-view .grid .tile > * {
  height: 100%;
  width: 100%;
  display: block;
}

/* sentinel tile should match tile sizing so grid flow stays consistent */
.feed.grid-view .grid .tile.sentinel {
  visibility: hidden;
}

@media (hover: hover) and (pointer: fine) {
  .action:hover { transform: translateY(-2px); }
}

/* Favorite (star) animation and color feedback */
.action.favorite { transition: none; }
.action.favorite svg { transition: none; }
.action.favorite .star { display: inline-block; font-size: 16px; line-height: 1; transition: none; color: color-mix(in srgb, var(--muted), transparent 20%); }
.action.favorite.active { color: #FFD700; }
.action.favorite.active .star { color: #FFD700; text-shadow: 0 6px 18px rgba(255,215,0,0.18); }
.action.favorite.active svg { 
  fill: currentColor; 
  /* thicker darker outline so the yellow star reads on light backgrounds */
  stroke: rgba(0,0,0,0.48);
  stroke-width: 1.8px;
}

/* Dark theme: use a lighter stroke for contrast on dark backgrounds */
:root[data-theme="dark"] .action.favorite.active svg {
  stroke: rgba(255,255,255,0.22);
  stroke-width: 1.8px;
}
/* Pull-to-refresh loader/logo adjustments */
.pull-to-refresh-logo { display: inline-block; filter: none; transition: filter 180ms ease, opacity 180ms ease; }
/* In dark theme, invert and slightly brighten the loader so it shows against dark backgrounds */
:root[data-theme="dark"] .pull-to-refresh-logo {
  /* invert colors and increase brightness a bit; keep saturation */
  filter: invert(100%) brightness(1.05) saturate(1.02);
  opacity: 0.98;
}
/* share action */
.action.share { opacity: 0.82; transition: opacity 180ms var(--transition-mid), transform 200ms var(--transition-mid); }
.action.share:hover { opacity: 1; }
.action.share:active { transform: scale(.9); }

/* Double-tap favorite overlay */
.favorite-overlay {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 48px;
  pointer-events: none;
  z-index: 100;
  will-change: transform, opacity;
}

.favorite-overlay.adding {
  color: #FFD700;
  text-shadow: 0 2px 12px rgba(0,0,0,0.2), 0 0 20px rgba(255,215,0,0.4);
  animation: favoriteAdd 600ms cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
}

.favorite-overlay.removing {
  color: #999;
  text-shadow: 0 2px 8px rgba(0,0,0,0.15);
  animation: favoriteRemove 500ms cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards;
}

/* When editor is open, subtly emphasize the card border and lift shadow; transition is defined on .card */
.card.editor-open {
  border-color: color-mix(in srgb, var(--primary), transparent 72%);
  /* keep editor emphasis but avoid any shadow under the post */
  box-shadow: none !important;
}

/* Give the editor itself a subtle top border that animates to match the card border */
.post-editor {
  border-top: 1px solid transparent;
  padding-top: 8px;
  transition: border-color 220ms var(--transition-mid), padding-top 220ms var(--transition-mid);
}
.card.editor-open .post-editor {
  border-top-color: color-mix(in srgb, var(--primary), transparent 84%);
}

/* Mobile adjustments for tighter photos */
@media (max-width: 768px) {
  .feed {
    gap: 22px;
    padding: calc(4px + var(--safe-top, 0px)) var(--page-side-padding-mobile) var(--page-side-padding-mobile) var(--page-side-padding-mobile);
  }
  .feed.grid-view {
    padding: calc(6px + var(--safe-top, 0px)) 16px 4px 16px;
  }
  .feed.grid-view .grid {
    gap: 4px; /* Reduced from 12px to make squares bigger */
  }
  .feed.grid-view .grid .tile {
    padding: 2px; /* Reduced from 8px to make squares bigger */
  }
  .card-body {
    padding: 12px 16px;
  }
}

/* Make multipost containers smaller in feed/explore */
.feed .card.multipost .card-media {
  /* allow the multipost media to size naturally but keep the inner matte
     padding so carousel images don't touch the card edges like single
     photos do */
  max-height: none;
  padding: var(--photo-mat);
  box-sizing: border-box;
}
.feed .card.multipost .card-media .media-link {
  /* match the inner rounding used elsewhere so the image keeps rounded
     corners while retaining the matte/padding */
  border-radius: calc(var(--radius) - var(--photo-mat));
  overflow: hidden;
  display: block;
  width: 100%;
  height: 100%;
}

/* Ensure list (single-column) feed has extra breathing room so posts don't feel cramped.
   Using a list-specific selector placed after other rules helps avoid accidental overrides. */
.feed:not(.grid-view) {
  /* reduced from 40px to provide tighter vertical spacing between posts */
  gap: 24px;
}

/* The PullToRefreshWrapper renders an outer container and places the
   actual feed children inside a second inner <div>. Target that inner
   wrapper so grid layout/gap applies to the posts themselves. */
.feed:not(.grid-view) > div:last-child {
  display: grid;
  /* keep the inner wrapper gap consistent with the feed gap */
  gap: 24px;
}

/* Fallback: some feed renderers wrap posts inside an extra inner <div> that
   uses inline styles (display:block). Inline styles prevent us from switching
   that wrapper to grid from external CSS. To ensure consistent spacing
   regardless of markup, add a margin-based fallback on the post cards
   themselves when in list view. */
.feed:not(.grid-view) .card {
  margin-bottom: 24px;
}
.feed:not(.grid-view) .card:last-child {
  margin-bottom: 0;
}

/* Single-post page wrapper: give a bit more breathing room so the
   full-post view doesn't butt up against the header or the bottom
   navbar/tabbar. Uses safe-area variables when available. */
.post-view-wrap {
  padding: calc(12px + var(--safe-top, 0px)) var(--page-side-padding) calc(20px + var(--safe-bottom, 0px)) var(--page-side-padding);
  box-sizing: border-box;
}

@media (max-width: 768px) {
  .post-view-wrap {
    padding: calc(12px + var(--safe-top, 0px)) var(--page-side-padding-mobile) var(--page-side-padding-mobile);
  }
}

/* Center spotify preview link inside post card captions */
.spotify-link {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 44px; /* Reserve space for the Spotify link content */
}

.spotify-link .spotify-preview-link {
  display: inline-flex; /* ensure anchor sizes to content when centered */
  align-items: center;
  gap: 8px;
  opacity: 0;
  transform: translateY(4px);
  animation: spotify-fade-in 300ms cubic-bezier(0.4, 0, 0.2, 1) forwards;
}

@keyframes spotify-fade-in {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@media (prefers-reduced-motion: reduce) {
  .spotify-link .spotify-preview-link {
    animation: none;
    opacity: 1;
    transform: none;
  }
}

.spotify-link .spotify-preview-link {
  display: inline-flex; /* ensure anchor sizes to content when centered */
  align-items: center;
  gap: 8px;
}

/* EXIF section open/close animation
   Similar to comments animation: animate max-height and opacity for smooth expand/collapse
*/
.exif-section {
  /* collapsed by default */
  max-height: 0px;
  opacity: 0;
  overflow: hidden;
  transition: max-height 320ms cubic-bezier(0.4, 0, 0.2, 1), opacity 280ms cubic-bezier(0.4, 0, 0.2, 1);
}
.exif-section > * {
  /* ensure inner wrapper doesn't overflow visually during the transition */
  overflow: hidden;
}
.exif-section.open {
  /* visible state */
  opacity: 1;
  max-height: 60px; /* enough for the exif info content */
}

@media (prefers-reduced-motion: reduce) {
  .exif-section { transition: none !important; max-height: none !important; opacity: 1 !important; }
}