.btn {
  appearance: none; border: 1px solid var(--border); background: var(--bg-elev);
  color: var(--text); padding: 8px 12px; border-radius: 999px;
  font-size: 14px; line-height: 1; cursor: pointer;
  transition: transform var(--transition-fast), background var(--transition-fast), border-color var(--transition-fast), color var(--transition-fast), box-shadow var(--transition-fast);
  font-weight: 600;
  position: relative;
  overflow: hidden;
}
.btn::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  border-radius: 50%;
  background: rgba(255,255,255,0.1);
  transform: translate(-50%, -50%);
  transition: width 0.4s, height 0.4s;
}
.btn:hover::before {
  width: 300px;
  height: 300px;
}
.btn:hover { 
  transform: translateY(-2px); 
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}
.btn.primary { 
  background: linear-gradient(135deg, var(--primary), color-mix(in srgb, var(--primary), var(--accent) 20%)); 
  color: #fff; 
  border-color: transparent;
  box-shadow: 0 4px 16px color-mix(in srgb, var(--primary), transparent 70%);
}
.btn.primary:hover {
  box-shadow: 0 6px 20px color-mix(in srgb, var(--primary), transparent 60%);
}
.btn.ghost { background: transparent; border-color: var(--border); }
.btn.icon { padding: 8px; width: 36px; height: 36px; display: grid; place-items: center; }

.feed {
  display: grid;
  gap: 14px;
  /* center feed/explore content to match the app's main max width */
  max-width: var(--maxw);
  margin: 0 auto;
  width: 100%;
  box-sizing: border-box;
  /* keep a small horizontal padding so full-bleed slides don't touch the edges */
  padding: 0 12px 80px 12px; /* Added 80px bottom padding for space above navbar */
}
.card {
  background: var(--bg-elev); border: 1px solid var(--border); border-radius: var(--radius);
  box-shadow: var(--shadow);
  /* Changed from overflow:hidden to visible to avoid 1px vertical cropping
     of contained media at certain desktop zoom levels due to fractional
     rounding between image height and card box. Media-specific clipping
     still handled inside .card-media which retains overflow hidden. */
  overflow: visible;
  transform: translateY(4px); opacity: 0; animation: in 460ms var(--transition-mid) forwards;
  transition: transform var(--transition-fast), box-shadow var(--transition-fast), border-color var(--transition-fast);

  width: 100%;
  max-width: 100%;
  min-width: 0;
  
  /* Performance optimizations */
  contain: layout style paint;
  content-visibility: auto;
}
@keyframes in {
  to { transform: translateY(0); opacity: 1; }
}
.view-fade { 
  animation: viewFade 280ms var(--transition-mid) both;
}
@keyframes viewFade { from { opacity: 0; transform: translateY(6px); } to { opacity: 1; transform: translateY(0); } }

.comment-item.new { animation: commentIn 360ms cubic-bezier(.2,.8,.2,1); }
@keyframes commentIn { from { opacity: 0; transform: translateY(6px) scale(.99); } to { opacity: 1; transform: translateY(0) scale(1); } }

/* animate removed comments: fade out and slide up slightly */
.comment-item.removing {
  animation: commentOut 320ms cubic-bezier(.2,.8,.2,1) forwards;
}
@keyframes commentOut {
  from { opacity: 1; transform: translateY(0) scale(1); height: auto; }
  to { opacity: 0; transform: translateY(-6px) scale(.995); height: 0; margin: 0; padding: 0; }
}

.btn { transition: transform 160ms ease, background 160ms ease, box-shadow 160ms ease; }
.btn:active { transform: translateY(1px) scale(.997); }

.follow-btn.pulse { animation: pulse 420ms ease; }
@keyframes pulse { 0% { transform: scale(.98); } 50% { transform: scale(1.04); } 100% { transform: scale(1); } }
.card-head {
  display: flex; 
  align-items: center; 
  gap: 10px; 
  padding: 10px 12px; 
  border-bottom: 1px solid var(--border);
  background: color-mix(in srgb, var(--bg-elev), transparent 10%);
  flex-wrap: nowrap; /* Prevent wrapping on mobile */
  min-width: 0; /* Allow flex children to shrink */
}

/* Subtle, card-scoped button micro-interactions (used on About and other card actions) */
.card .btn {
  transition: transform 160ms var(--transition-mid), box-shadow 200ms var(--transition-mid), background 140ms ease;
  padding: 10px 14px; /* slightly larger touch target inside cards */
}
.card .btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 22px rgba(0,0,0,0.06);
}
.card .btn.primary:hover {
  box-shadow: 0 10px 28px rgba(37,99,235,0.10), 0 1px 4px rgba(0,0,0,0.04) inset;
}
.card .btn:focus {
  outline: none;
  box-shadow: 0 0 0 4px color-mix(in srgb, var(--primary), transparent 88%), 0 6px 18px rgba(0,0,0,0.06);
  transform: translateY(-1px);
}
.card .btn:active {
  transform: translateY(1px) scale(.997);
  box-shadow: 0 6px 16px rgba(0,0,0,0.05);
}

/* Icon reveal buttons: show a small icon and gently reveal the text on hover/focus
  or when JS toggles the `.expanded` class (used to reveal labels on click). */
.icon-reveal { display: inline-flex; align-items: center; gap: 8px; overflow: hidden; }
.icon-reveal .icon { display: inline-grid; place-items: center; width: 18px; height: 18px; transition: transform 220ms var(--transition-mid), opacity 220ms var(--transition-fast); }
.icon-reveal .reveal { display: inline-block; transform-origin: left center; transition: transform 260ms var(--transition-mid), opacity 220ms var(--transition-fast), max-width 260ms var(--transition-mid); opacity: 1; white-space: nowrap; max-width: 120px; overflow: hidden; }

/* default: slightly hide the reveal label on compact buttons to emphasize the icon */
.icon-reveal:not(.primary) .reveal { transform: translateX(-6px) scale(0.98); opacity: 0; max-width: 0; }

.icon-reveal:hover .icon,
.icon-reveal:focus .icon { transform: translateY(-3px) scale(1.06); }
.icon-reveal:hover .reveal,
.icon-reveal:focus .reveal { transform: translateX(0) scale(1); opacity: 1; max-width: 120px; }

/* Explicit expanded state: reveal label when JS toggles .expanded */
.icon-reveal.expanded .reveal { transform: translateX(0) scale(1); opacity: 1; max-width: 220px; }

/* make primary buttons slightly more pronounced */
.btn.primary.icon-reveal .reveal { font-weight: 700; }

/* keep motion minimal for users who prefer reduced motion */
@media (prefers-reduced-motion: reduce) {
  .icon-reveal .icon, .icon-reveal .reveal, .icon-reveal:hover .icon, .icon-reveal:focus .icon, .icon-reveal:hover .reveal, .icon-reveal:focus .reveal { transition: none !important; transform: none !important; }
}

/* Respect prefers-reduced-motion */
@media (prefers-reduced-motion: reduce) {
  .card .btn, .card .btn:hover, .card .btn:focus { transition: none; transform: none; box-shadow: none; }
}
.avatar { width: 30px; height: 30px; border-radius: 50%; object-fit: cover; flex-shrink: 0; }
.user-line { 
  display: flex; 
  flex-direction: column;
  gap: 2px;
  min-width: 0; /* Allow flex item to shrink below content size */
  flex: 1; /* Take available space */
  overflow: hidden; /* Contain overflowing text */
}
.username { 
  font-weight: 700; 
  font-size: 14px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}
.dim { 
  color: var(--muted); 
  font-size: 12px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
}

.card-media img {
  width: 100%; height: auto; display: block;
  background: #00000008; opacity: 0; transition: opacity 220ms ease;
}
.card-media img.loaded { opacity: 1; }

.card-media {
  background: #00000006;
  /* Keep the media container clipping for rounded frame, while parent
     .card now uses overflow:visible to prevent fractional cropping. */
  overflow: hidden;
  max-width: 100%;
  /* center media (single images) horizontally inside the card */
  width: auto;
  max-width: 100%;
  height: auto;
  object-fit: contain;
  display: block;
  margin: 0 auto;
  background: var(--bg);
}

/* Subtle frame for photos in feed / explore
   - uses an inset 1px ring to emulate a photo frame without changing layout
   - applies to single images, carousel slides, and grid tiles
*/
.card-media img,
.carousel-slide img,
.grid .tile img {
  border-radius: 10px;
  background-clip: padding-box; /* keep the inset ring sharp */
  box-shadow: inset 0 0 0 1px color-mix(in srgb, var(--border), transparent 58%), 0 8px 20px rgba(0,0,0,0.04);
  transition: box-shadow var(--transition-fast), transform var(--transition-fast);
}

/* Slightly emphasize the frame on hover/focus for affordance without being loud */
.card:hover .card-media img,
.card-media:hover img,
.grid .tile:hover img,
.carousel-slide img:hover {
  box-shadow: inset 0 0 0 1px color-mix(in srgb, var(--border), transparent 40%), 0 12px 30px rgba(0,0,0,0.06);
}

/* Carousel: horizontally scrollable set of images for posts with multiple images */
.card-media .carousel {
  display: flex; gap: 8px; overflow-x: auto; scroll-snap-type: x mandatory; -webkit-overflow-scrolling: touch;
}
.card-media .carousel img {
  flex: 0 0 100%; scroll-snap-align: center; width: 100%; height: auto; object-fit: contain; display: block;
}

/* Controlled transform-based carousel for posts (better UX than free horizontal scroll) */
.carousel-wrapper { position: relative; overflow: hidden; }
.carousel-wrapper { touch-action: pan-y; }
.carousel-track {
  display: flex; transition: transform 320ms cubic-bezier(.2,.8,.2,1); width: 100%; will-change: transform;
}
.carousel-slide { flex: 0 0 100%; display: flex; align-items: center; justify-content: center; }
.carousel-slide img { width: 100%; height: auto; object-fit: contain; display: block; }

/* arrows */
.carousel-arrow {
  position: absolute; top: 50%; transform: translateY(-50%); z-index: 10;
  background: color-mix(in srgb, var(--bg), transparent 60%); border: 1px solid var(--border);
  width: 38px; height: 38px; border-radius: 999px; display: grid; place-items: center; cursor: pointer;
  box-shadow: 0 8px 18px rgba(0,0,0,0.08); color: var(--text); font-size: 22px; line-height: 1;
  opacity: 0; pointer-events: none; transition: opacity 180ms var(--transition-fast), transform 180ms var(--transition-fast);
}
.carousel-arrow.left { left: 8px; }
.carousel-arrow.right { right: 8px; }
.carousel-arrow:hover { transform: translateY(-50%) scale(1.03); }

/* Edge hover areas: reveal arrows when user is hovering near the left/right edges */
.carousel-wrapper { position: relative; }
.carousel-wrapper:focus { outline: none; }
.edge-area {
  position: absolute; top: 0; bottom: 0; width: 14%; z-index: 5; background: transparent;
  /* don't block clicks on slide content (Edit button) */
  pointer-events: none;
}
.edge-area.left { left: 0; }
.edge-area.right { right: 0; }

/* When hovering the left/right edge, reveal the corresponding arrow */
.edge-area.left:hover ~ .carousel-track + .carousel-arrow.left,
.carousel-wrapper:hover .edge-area.left:hover ~ .carousel-track + .carousel-arrow.left {
  opacity: 1; pointer-events: auto;
}
.edge-area.right:hover ~ .carousel-track + .carousel-arrow.right,
.carousel-wrapper:hover .edge-area.right:hover ~ .carousel-track + .carousel-arrow.right {
  opacity: 1; pointer-events: auto;
}

/* Also reveal arrows when wrapper is focused (keyboard users) or hovered overall */
.carousel-wrapper:focus .carousel-arrow,
.carousel-wrapper:hover .carousel-arrow {
  opacity: 0.9; pointer-events: auto;
}

/* dots */
.carousel-dots { position: absolute; left: 50%; transform: translateX(-50%); bottom: 8px; display: flex; gap: 8px; z-index: 11; }
.carousel-dots .dot {
  width: 8px; height: 8px; border-radius: 999px; background: color-mix(in srgb, var(--bg-elev), transparent 40%); border: 1px solid var(--border); padding: 0; cursor: pointer;
}
.carousel-dots .dot.active { background: var(--primary); border-color: transparent; box-shadow: 0 6px 18px rgba(0,0,0,0.12); transform: scale(1.15); }

/* make arrows and dots smaller on small screens */
@media (max-width: 640px) {
  .carousel-arrow { width: 34px; height: 34px; font-size: 20px; }
  .carousel-dots .dot { width: 7px; height: 7px; }
}

/* Desktop: cap feed/explore card image height so single posts don't fill the
   whole viewport at normal browser zoom. Keeps images large but prevents the
   'zoomed in' feeling on wide screens. Mobile rules above remain unchanged. */
/* Desktop image sizing: previously 64vh could cause fractional rounding
   at certain desktop zoom levels (esp. 100% on some displays) leading to
   a 1px vertical crop because the container was overflow:hidden while
   the intrinsic image computed a slightly larger pixel height. Give a
   little headroom (+2vh) and also cap by available dynamic viewport
   height minus a conservative chrome offset so tall landscape windows
   still keep images comfortably sized. Use dvh so browser UI changes
   (URL bar hide/show) on some platforms don't cause jumpy resizes. */
@media (min-width: 900px) {
  :root { --chrome-offset: 220px; }
  .card-media {
    /* allow the card to size to the image but not exceed viewport height */
    max-height: min(66vh, calc(100dvh - var(--chrome-offset)));
    display: block;
    /* avoid inadvertent vertical clipping; we still hide horizontal overflow for carousel drag */
    overflow-y: visible;
    overflow-x: hidden;
  }

  .card-media img,
  .card-media .carousel img,
  .carousel-slide img {
    /* respect image aspect ratio while constraining height */
    max-height: min(66vh, calc(100dvh - var(--chrome-offset)));
    max-width: 100%;
    width: auto;
    object-fit: contain;
    display: block;
    margin: 0 auto;
  }

  /* keep carousel slides vertically centered when images are constrained */
  .carousel-slide { align-items: center; justify-content: center; }
}

/* Make profile avatar a bit smaller on narrow screens so header actions fit */
@media (max-width: 640px) {
  .profile-avatar { width: 56px; height: 56px; border-radius: 12px; }
}

.card:hover {
  transform: translateY(0);
  box-shadow: 0 18px 44px rgba(0,0,0,0.12);
  border-color: color-mix(in srgb, var(--primary), transparent 84%);
}

.card:focus-within { outline: none; }

/* Prefer showing the card outline only when a descendant is keyboard-focused.
   Uses :has() to detect a focus-visible descendant; browsers that don't support
   :has() will still hide the mouse-click halo (fallback above) while keyboard
   users retain a visible ring where supported. */
.card:has(:focus-visible) {
  outline: 2px solid color-mix(in srgb, var(--primary), transparent 70%);
  outline-offset: 4px;
  border-radius: 8px;
}

.card-body { padding: 10px 12px; display: grid; gap: 10px; }
.caption {
  font-size: 15px;
  font-family: 'Patrick Hand', ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
  line-height: 1.35;
  text-align: center;
  /* allow long captions/newlines to wrap */
  white-space: pre-wrap;
  overflow-wrap: anywhere;
  word-break: break-word;
}
.actions { display: flex; align-items: center; justify-content: center; gap: 10px; }
.action {
  display: inline-flex; align-items: center; gap: 6px; color: var(--muted);
  font-size: 13px; cursor: pointer; padding: 6px 8px; border-radius: 8px;
  transition: background var(--transition-fast), color var(--transition-fast);
}
.action:hover { background: color-mix(in srgb, var(--primary-weak), transparent 70%); color: var(--text); }

/* Tap / press feedback for action icons */
/* Ensure svgs inherit color and animate smoothly */
.action svg { width: 18px; height: 18px; display: inline-block; vertical-align: middle; transition: transform 160ms var(--transition-fast), opacity 160ms var(--transition-fast), color 200ms var(--transition-fast), stroke 200ms var(--transition-fast); color: inherit; }

/* Subtle press scale and color change for most actions (but not overriding favorite active state) */
.action:active { transform: translateY(1px) scale(0.992); }
.action:not(.favorite):active { color: var(--primary); }
.action:focus-visible { outline: 2px solid color-mix(in srgb, var(--primary), transparent 70%); outline-offset: 4px; border-radius: 8px; }

/* Also provide a tiny hover/press lift on pointer devices */
@media (hover: hover) and (pointer: fine) {
  .action:hover { transform: translateY(-2px); }
}

/* Favorite (star) animation and color feedback */
.action.favorite { transition: transform 220ms var(--transition-mid), color 220ms var(--transition-mid); }
.action.favorite .star { display: inline-block; font-size: 16px; line-height: 1; transition: transform 220ms cubic-bezier(.2,.8,.2,1), color 220ms var(--transition-mid), text-shadow 220ms var(--transition-mid); color: color-mix(in srgb, var(--muted), transparent 20%); }
.action.favorite.active { color: #FFD700; }
.action.favorite.active .star { animation: starPop 420ms cubic-bezier(.2,.8,.2,1); color: #FFD700; text-shadow: 0 6px 18px rgba(255,215,0,0.18); }
.action.favorite.active svg { 
  fill: currentColor; 
  /* thicker darker outline so the yellow star reads on light backgrounds */
  stroke: rgba(0,0,0,0.48);
  stroke-width: 1.8px;
}

/* Dark theme: use a lighter stroke for contrast on dark backgrounds */
:root[data-theme="dark"] .action.favorite.active svg {
  stroke: rgba(255,255,255,0.22);
  stroke-width: 1.8px;
}
/* share action */
.action.share { opacity: 0.82; transition: opacity 180ms var(--transition-mid), transform 200ms var(--transition-mid); }
.action.share:hover { opacity: 1; }
.action.share:active { transform: scale(.9); }

/* Double-tap favorite overlay */
.favorite-overlay {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 48px;
  pointer-events: none;
  z-index: 100;
  will-change: transform, opacity;
}

.favorite-overlay.adding {
  color: #FFD700;
  text-shadow: 0 2px 12px rgba(0,0,0,0.2), 0 0 20px rgba(255,215,0,0.4);
  animation: favoriteAdd 600ms cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
}

.favorite-overlay.removing {
  color: #999;
  text-shadow: 0 2px 8px rgba(0,0,0,0.15);
  animation: favoriteRemove 500ms cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards;
}

@keyframes favoriteAdd {
  0% { 
    transform: translate(-50%, -50%) scale(0.5); 
    opacity: 0; 
  }
  30% {
    opacity: 1;
  }
  60% { 
    transform: translate(-50%, -50%) scale(1.08); 
    opacity: 1;
  }
  100% { 
    transform: translate(-50%, -50%) scale(1) translateY(-8px); 
    opacity: 0; 
  }
}

@keyframes favoriteRemove {
  0% { 
    transform: translate(-50%, -50%) scale(1); 
    opacity: 1; 
  }
  100% { 
    transform: translate(-50%, -50%) scale(0.3); 
    opacity: 0; 
  }
}

@keyframes starPop {
  0% { transform: scale(0.9) rotate(-6deg); }
  40% { transform: scale(1.18) rotate(6deg); }
  70% { transform: scale(0.98) rotate(-2deg); }
  100% { transform: scale(1) rotate(0deg); }
}

/* Comments open/close animation
   Notes:
   - Animating `grid-template-rows: 1fr` -> `0fr` can be janky in some browsers
     because `fr` units are not interpolated smoothly. Switch to a max-height
     + opacity approach for consistent, organic open/close timing.
   - JavaScript will set an inline `max-height` to the element's scrollHeight
     when opening/closing so the transition is accurate for content of any size.
*/
.comments {
  /* collapsed by default */
  max-height: 0px;
  opacity: 0;
  overflow: hidden;
  transition: max-height 320ms cubic-bezier(0.4, 0, 0.2, 1), opacity 280ms cubic-bezier(0.4, 0, 0.2, 1);
}
.comments > * {
  /* ensure inner wrapper doesn't overflow visually during the transition */
  overflow: hidden;
}
.comments.open {
  /* visible state; JS will typically set an inline max-height equal to the
     actual content height for a smooth transition. The CSS fallback max-height
     keeps things working even if JS is disabled. */
  opacity: 1;
  max-height: 800px; /* fallback - should be larger than typical comment panes */
}

.comment-box { display: grid; grid-template-columns: 1fr auto; gap: 8px; }
.input {
  width: 100%; border: 1px solid var(--border); background: var(--bg);
  color: var(--text); padding: 10px 12px; border-radius: 10px; font-size: 14px;
}
.input:focus { outline: 2px solid color-mix(in srgb, var(--primary), transparent 60%); border-color: var(--primary); }
.bio-editor {
  width: 100%; border: 1px solid var(--border); background: var(--bg);
  color: var(--text); padding: 10px 12px; border-radius: 10px; font-size: 14px;
  /* prevent the user from manually resizing the textarea (we control sizing via grid) */
  resize: none;
  /* allow internal scrolling if content overflows the configured height */
  overflow: auto;
}
.input-wrapper { position: relative; }
.input-ghost-placeholder {
  position: absolute;
  left: 12px; right: 12px; top: 50%; transform: translateY(-50%);
  pointer-events: none; color: color-mix(in srgb, var(--muted), transparent 12%);
  font-size: 14px; line-height: 1; overflow: hidden; white-space: nowrap;
}
.input-ghost-placeholder { display: flex; align-items: center; gap: 6px; }
.input-ghost-placeholder .typewriter {
  display: inline-block; max-width: 100%; overflow: hidden; text-overflow: ellipsis;
  color: color-mix(in srgb, var(--muted), transparent 8%);
}
.input-ghost-placeholder .caret {
  color: color-mix(in srgb, var(--muted), transparent 12%);
  opacity: 0.95;
  animation: blinkCaret 900ms steps(1) infinite;
}

@keyframes blinkCaret {
  0%, 49% { opacity: 1; }
  50%, 100% { opacity: 0; }
}

@media (prefers-reduced-motion: reduce) {
  .input-ghost-placeholder .typewriter { animation: none; border-right: none; }
}
.comment-list { display: grid; gap: 6px; }
.comment-item { font-size: 14px; }
.comment-item .author { font-weight: 700; margin-right: 6px; }

.comment-list { display: grid; gap: 10px; }
.comment-item { display: flex; gap: 10px; align-items: flex-start; padding: 8px; border-radius: 10px; background: color-mix(in srgb, var(--bg-elev), transparent 6%); border: 1px solid var(--border); }
.comment-avatar { width: 36px; height: 36px; border-radius: 10px; object-fit: cover; flex: 0 0 36px; }
.comment-body { display: block; min-width: 0; }
.comment-head { display:flex; gap:8px; align-items:center; margin-bottom:4px; }
.comment-text { 
  font-size: 14px; 
  color: var(--text);
  white-space: pre-wrap;
  overflow-wrap: anywhere;
  word-break: break-word;
}

/* Appear animation for comment items (staggered) */
.appear { opacity: 0; transform: translateY(6px) scale(.998); animation: appearIn 300ms cubic-bezier(.2,.8,.2,1) forwards; }
@keyframes appearIn { to { opacity: 1; transform: translateY(0) scale(1); } }

/* Skeleton placeholder styles */
.skeleton { background: linear-gradient(90deg, color-mix(in srgb, var(--bg-elev), transparent 8%), color-mix(in srgb, var(--bg-elev), transparent 2%)); color: transparent; pointer-events: none; }
.skeleton .comment-avatar { background: linear-gradient(180deg, color-mix(in srgb, var(--bg-elev), transparent 6%), color-mix(in srgb, var(--bg-elev), transparent 2%)); border-radius: 10px; }
.skeleton-avatar { width: 36px; height: 36px; border-radius: 10px; background: linear-gradient(180deg, color-mix(in srgb, var(--bg-elev), transparent 8%), color-mix(in srgb, var(--bg-elev), transparent 2%)); }
.skeleton-line { height: 12px; border-radius: 8px; margin-bottom: 8px; background: linear-gradient(90deg, color-mix(in srgb, var(--bg-elev), transparent 8%), color-mix(in srgb, var(--bg-elev), transparent 2%)); }
.skeleton-author { width: 110px; height: 14px; margin-right: 8px; display: inline-block; }
.skeleton-time { width: 40px; height: 12px; display: inline-block; }
.skeleton-text { width: 100%; height: 14px; }

@media (prefers-reduced-motion: reduce) {
  .appear { animation: none; opacity: 1; transform: none; }
}

.comment-box { display:flex; gap:8px; align-items:center; }
.comment-box .input { flex: 1 1 auto; border-radius: 999px; padding: 10px 14px; }
.comment-box .btn.primary { border-radius: 999px; padding: 8px 12px; }

/* Remove the strong blue outline/halo specifically for the comment input when focused.
   Keep global focus styles for other controls, but avoid the heavy highlight for this
   compact input to match the desired look. */
.comment-box .input:focus,
.comment-box .input:focus-visible {
  outline: none;
  box-shadow: none;
  /* keep a subtle border change for affordance if you want, otherwise keep base border */
  border-color: var(--border);
}

/* Confirm-once delete badge: first click enters .confirming state (tinted danger)
   second click proceeds with removal. Auto-cancels after a short timeout. */
.comment-badge.confirming {
  background: color-mix(in srgb, var(--danger), var(--bg-elev) 8%);
  border-color: color-mix(in srgb, var(--danger), transparent 72%);
  color: #fff;
  transform: scale(1.04);
  /* intentionally no glow/drop-shadow to keep the confirm visual subtle */
}
.comment-badge.confirming svg { stroke: #fff; color: #fff; filter: none; }

/* Inline post delete button confirming state: first click toggles confirming,
   second click (within timeout) proceeds. Visual matches comment confirm style. */
.delete-btn.confirming {
  /* Use a semi-opaque background-color (animatable) instead of a gradient so
     entering and exiting the confirming state can transition smoothly. */
  background-color: color-mix(in srgb, var(--danger), var(--bg-elev) 14%) !important;
  /* keep the visible label readable against the tinted background */
  color: var(--text) !important;
  /* ensure the border and background remain visible even though we globally
     suppress button backgrounds for edit/delete — use !important to win */
  border-color: color-mix(in srgb, var(--danger), transparent 72%) !important;
  transform: scale(1.02);
  will-change: transform, background-color, border-color, opacity;
}
.delete-btn.confirming .icon { color: var(--danger) !important; }

/* Ensure the confirming label remains visible even when the button is collapsed
   and always reads "Confirm". We visually hide the original label text and
   render a pseudo-element with the desired string so collapse/expand
   transitions won't switch back to the default label. */
.delete-btn.confirming .reveal.label {
  /* override any collapsed-state rules */
  max-width: 160px !important;
  opacity: 1 !important;
  transform: translateX(0) scale(1) !important;
  color: transparent !important; /* hide original text */
  position: relative !important;
}
.delete-btn.confirming .reveal.label::after {
  content: "Confirm";
  position: absolute;
  left: 0;
  top: 0;
  color: var(--text);
  white-space: nowrap;
  pointer-events: none;
}


.comment-badge { display:inline-grid; place-items:center; min-width:28px; height:28px; padding:6px; background:color-mix(in srgb, var(--bg-elev), transparent 20%); border-radius:8px; border:1px solid var(--border); color:var(--muted); }

.empty {
  padding: 32px 16px; text-align: center; color: var(--muted);
}