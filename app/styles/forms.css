.input {
  width: 100%; border: 1px solid var(--border); background: var(--bg);
  color: var(--text); padding: 10px 12px; border-radius: 10px; font-size: 12px;
}
.input:focus { outline: 2px solid color-mix(in srgb, var(--primary), transparent 60%); border-color: var(--primary); }
.bio-editor {
  width: 100%; border: 1px solid var(--border); background: var(--bg);
  color: var(--text); padding: 10px 12px; border-radius: 10px; font-size: 12px;
  /* prevent the user from manually resizing the textarea (we control sizing via grid/CSS) */
  resize: none;
  /* allow internal scrolling if content overflows the configured height */
  overflow: auto;
}
.input-wrapper { position: relative; }

/* Compact row for photo action icons (add/edit/delete) with minimal vertical gaps */
.photo-action-row {
  display: flex;
  justify-content: center;
  gap: 8px;
  margin-top: 4px !important;
  margin-bottom: 4px !important;
  align-items: center;
}
.photo-action-row .btn.small-min { margin: 0; }
.input-ghost-placeholder {
  position: absolute;
  left: 12px; right: 12px; top: 50%; transform: translateY(-50%);
  pointer-events: none; color: color-mix(in srgb, var(--muted), transparent 12%);
  font-size: 12px; line-height: 1; overflow: hidden; white-space: nowrap;
}
.input-ghost-placeholder { display: flex; align-items: center; gap: 6px; }
.input-ghost-placeholder .typewriter {
  display: inline-block; max-width: 100%; overflow: hidden; text-overflow: clip;
  color: color-mix(in srgb, var(--muted), transparent 8%);
}
.input-ghost-placeholder .typewriter {
  /* CSS-only typewriter: reveal by animating width in ch units.
     We run the animation once per mount (no infinite loop). The parent
     remounts the span when the placeholder changes so the animation
     will restart on rotation. */
  white-space: nowrap;
  display: inline-block;
  vertical-align: middle;
  overflow: hidden;
  box-sizing: content-box;
  width: 0ch; /* start closed */
  max-width: none;
  animation-name: typeReveal;
  animation-duration: var(--duration, 3000ms);
  animation-timing-function: steps(var(--len, 20), end);
  animation-iteration-count: 1;
  animation-fill-mode: forwards;
}

@keyframes typeReveal {
  /*
    0%   -> start closed
    60%  -> fully typed
    80%  -> hold fully typed (pause)
    100% -> erased (shrink back to 0)
    The steps() timing function gives a per-character jump for both
    the typing and backspacing phases.
  */
  0% { width: 0ch; }
  60% { width: calc(var(--len, 20) * 1ch); }
  80% { width: calc(var(--len, 20) * 1ch); }
  100% { width: 0ch; }
}
.input-ghost-placeholder .caret {
  color: color-mix(in srgb, var(--muted), transparent 12%);
  opacity: 0.95;
  animation: blinkCaret 900ms steps(1) infinite;
  font-weight: 700;
}

@keyframes blinkCaret {
  0%, 49% { opacity: 1; }
  50%, 100% { opacity: 0; }
}

@media (prefers-reduced-motion: reduce) {
  .input-ghost-placeholder .typewriter { animation: none; border-right: none; }
}

/* Disable the native textarea resize handle for the uploader's caption only.
   The caption textarea uses the shared `.input` class but lives inside
   `.uploader` -> `.input-wrapper`, so scope the rule to avoid globally
   disabling resizing for other textareas. */
.uploader .input-wrapper textarea.input {
  resize: none; /* prevents manual corner resize */
  overflow: auto; /* allow internal scrolling if content overflows */
}

/* Hide the small drag-resizer in WebKit-based browsers (Chrome, Edge, Safari) */
.uploader .input-wrapper textarea.input::-webkit-resizer { display: none; }

.form-row { display: flex; gap: 12px; align-items: center; justify-content: space-between; margin-top: 6px; }

/* Publish Controls Row - Clean layout for the three action buttons */
.publish-controls-row {
  display: flex;
  flex-direction: column;
  width: max-content;
  margin: 0 auto;
  justify-content: center;
  align-items: center;
  gap: 12px;
}

/* Keep uploader publish controls on a single line at all sizes.
   Scoped to `.uploader .publish-controls-row` so other form layouts
   retain their responsive stacking. Allow horizontal scroll if the
   viewport becomes too narrow instead of wrapping to multiple lines. */
.uploader .publish-controls-row {
  display: flex !important;
  flex-direction: row !important;
  flex-wrap: nowrap !important;
  justify-content: center !important;
  gap: 8px !important;
  width: auto !important;
  margin: 0 auto !important;
  overflow-x: auto !important;
  -webkit-overflow-scrolling: touch !important;
  white-space: nowrap !important;
}

.uploader .publish-controls-row > * {
  flex: 0 1 auto !important; /* allow shrinking */
  min-width: 72px !important; /* avoid collapsing too small */
  white-space: nowrap !important;
}

/* When the controls are in countdown mode, allow the publish-button to
   occupy available width and remove nowrap/overflow constraints so the
   countdown digits are not clipped. This only applies while countdown
   is active to avoid changing default layout. */
.uploader .publish-controls-row.in-countdown {
  overflow-x: visible !important;
  white-space: normal !important;
}

.uploader .publish-controls-row.in-countdown > * {
  white-space: normal !important;
}

.uploader .publish-controls-row.in-countdown .publish-button {
  flex: 1 1 auto !important;
  min-width: 0 !important;
}

.uploader .publish-controls-row .vis-toggle,
.uploader .publish-controls-row .discard-btn {
  width: auto !important;
  max-width: none !important;
}

.uploader .publish-controls-row .publish-button {
  min-width: 72px !important;
}

/* Base button styles for publish controls */
.publish-controls-row .publish-button,
.publish-controls-row .discard-btn,
.publish-controls-row .vis-toggle {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-height: var(--publish-two-line-height, 48px);
  height: var(--publish-two-line-height, 48px);
  padding: 7px 16px;
  border-radius: 999px;
  font-size: 14px;
  font-weight: 400;
  line-height: 1;
  box-sizing: border-box;
  vertical-align: middle;
}

/* Publish button - flexible width for wait messages */
.publish-controls-row .publish-button {
  width: auto;
  min-width: 120px;
  background: transparent;
  border: none;
}

/* When publish-button is the only visible control, allow it to expand
   to occupy available space and wrap its internal content so text
   doesn't get clipped (e.g. when visibility/discard are hidden). */
.uploader .publish-controls-row > .publish-button:only-child {
  flex: 1 0 auto !important;
  min-width: 0 !important;
  width: auto !important;
  overflow: visible !important;
}

.uploader .publish-controls-row > .publish-button:only-child .publish-content {
  white-space: normal !important;
  flex-wrap: wrap !important;
}

/* Discard button - transparent with no border */
.publish-controls-row .discard-btn {
  width: 220px;
  background: transparent;
  border: none;
}

/* Visibility toggle - transparent with no border */
.publish-controls-row .vis-toggle {
  width: 220px;
  background: transparent;
  border: none;
  gap: 8px;
  position: relative;
  transition: color 260ms var(--transition-fast);
}

.publish-controls-row .vis-toggle .vis-icon {
  position: relative;
  width: 18px;
  height: 18px;
  display: inline-grid;
  place-items: center;
}

.publish-controls-row .vis-toggle .vis-icon svg {
  position: absolute;
  top: 0;
  left: 0;
  width: 18px;
  height: 18px;
  transition: transform 320ms cubic-bezier(.2,.8,.2,1), opacity 260ms var(--transition-fast);
}

.publish-controls-row .vis-toggle::after {
  display: none !important;
}

.publish-controls-row .vis-toggle.public .eye-open {
  opacity: 1;
  transform: translateY(0) scale(1);
}

.publish-controls-row .vis-toggle.public .eye-closed {
  opacity: 0;
  transform: translateY(-6px) scale(0.92) rotate(-6deg);
}

.publish-controls-row .vis-toggle.private .eye-open {
  opacity: 0;
  transform: translateY(6px) scale(0.92);
}

.publish-controls-row .vis-toggle.private .eye-closed {
  opacity: 1;
  transform: translateY(0) scale(1) rotate(0deg);
}

.publish-controls-row .vis-toggle:active {
  transform: translateY(-1px) scale(0.997);
}

@media (prefers-reduced-motion: reduce) {
  .publish-controls-row .vis-toggle .vis-icon svg {
    transition: none !important;
  }
}

/* Slightly increase gap inside btn-group to visually separate the three controls */
.publish-controls-row .btn-group { gap: 16px; }

/* Mobile: stack form rows and ensure button group fills width */
@media (max-width: 640px) {
  .form-row {
    flex-direction: column;
    align-items: stretch;
    gap: 10px;
    justify-content: flex-start;
  }

  .form-row .vis-label {
    width: 100%;
    align-items: flex-start;
  }

  /* Make the button group stack vertically and fill available width */
  .btn-group {
    display: flex;
    flex-direction: column;
    gap: 10px;
    width: 100%;
    align-items: stretch;
  }

  .btn-group .btn {
    width: 100%;
  }
}